Summary Booking and Payment: (CAN get BookingHistory)
/// Booking Form.jsx:press "Reservation"(check LOGIN??), API Server to Create Booking data in DB 
---> link to ConfirmBookingPage.jsx: can update and cancel booking

///cancelBooking.js: check paymentIntentId?? (checkouted??) , update BookingStatus "CANCELLED", use paymentIntentId to Stripe.refunds (BokingHistory Checkouted)
/// when Strip got data, will send req.body (post method) into stripeWebhook.js --> Checking EventStatus, and Updata Booking-Payment Status
/// stripeWebhook: send res. to Strip Dont sent data again END PROCRESS for Server

///// FRONTED-WEB:
#ConfirmBookingPage.jsx: have Booking data, when press "Confirm and Pay" --> link to 'user/payment/craete-session', Payment.jsx: SHOW CheckoutForm
#Payment.jsx : get token, bookingData, API post('/payment/create-session/:bookingID', createPaymentSession) when return Chekout Form, API Function is called = session.id (clientsecret)
>>> at createPaymentSession.js (Server-Controller) : find Lasted this booking, and create sessionID, return URL success-page, cancel-page
--->  send sessionID to FRONTEND, and return URL success-page or cancel-page DEPEND ON Event
/// Payment SUCCESS: return URL success-page : show ThankyouPage, useEffect API post("/payment/webhook", express.raw({ type: 'application/json' }), stripeWebhook)
--> stripeWebhook: get Event-verify and UPDATE Booking, Payment STATUS
/// Payment FAILD : return URL cancel-page : show CancelPaymentPage, API update Payment "FAILD", stripeWebhook
*** ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á payment record ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô payment table ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•) 
‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡πÉ‡∏ô stripeWebhook ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà Frontend ‡πÄ‡∏õ‡∏¥‡∏î Stripe Checkout form ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô.

/// ADDAccommodation: 
req.body:
{
  "accomInfrom": {
    "title": "Beautiful Beach House",
    "description": "A beautiful beach house with a great view.",
    "pricePerNight": 200.00,
    "availQTY": 5,
    "addressDetail": "123 Beach Road",
    "city": "Miami",
    "country": "USA",
    "maxGuests": 6,
    "numBedrooms": 3,
    "numBathrooms": 2,
    "latitude": 25.7617,
    "longitude": -80.1918,
    "accomCateID": 1,
    "typeOfAccom": "ENTIREHOME"
  },
  "roomData": [
    { "name": "Master Bedroom", "imageRoom": ["https://example.com/master-room.jpg", "https://example.com/master-room2.jpg"] },
    { "name": "Living Room", "imageRoom": ["https://example.com/living-room.jpg"] }
  ],
  "amenity": [
    { "amenityID": 1, "quantity": 2 },
    { "amenityID": 2, "quantity": 3 }
  ]
}


//NOTE: Multer
üî¥ ‡∏ó‡∏≥‡πÑ‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ multer?
multer ‡πÄ‡∏õ‡πá‡∏ô middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Express.js ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢ ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡∏à‡∏≤‡∏Å FormData ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Frontend ‡πÄ‡∏ä‡πà‡∏ô React, Vue, Angular
multer ‡πÄ‡∏õ‡πá‡∏ô middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Express.js ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡πÉ‡∏ô multipart/form-data ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà Browser ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
‡∏≠‡πà‡∏≤‡∏ô multipart/form-data ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô req.file
EX.
const multer = require("multer");
const upload = multer({ storage: multer.memoryStorage() });
app.post("/upload", upload.single("file"), (req, res) => {
    console.log(req.file); // ‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô `req.file`
    res.json({ message: "Upload success!" });
});

2Ô∏è‚É£ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Memory ‡∏´‡∏£‡∏∑‡∏≠ Disk
multer.memoryStorage() ‚Üí ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô RAM (‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
multer.diskStorage() ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå

/// ‡∏™‡πà‡∏á‡πÑ‡∏õ API ‡∏≠‡∏∑‡πà‡∏ô, ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
const storage = multer.memoryStorage();
const upload = multer({ storage });
app.post("/upload", upload.single("file"), (req, res) => {
    console.log(req.file.buffer); // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô Buffer ‡πÑ‡∏î‡πâ
    res.json({ message: "Upload success!" });
});
üîπ ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ multer
Express.js ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
req.body ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå (‡πÅ‡∏Ñ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• text)
‡∏ï‡πâ‡∏≠‡∏á parse binary data ‡πÄ‡∏≠‡∏á ‡∏ã‡∏∂‡πà‡∏á ‡∏¢‡∏∏‡πà‡∏á‡∏¢‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
‚úÖ ‡πÉ‡∏ä‡πâ multer ‡πÅ‡∏•‡πâ‡∏ß Express.js ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ
‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å FormData (input type="file")
‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô Buffer (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ memoryStorage())
‡πÉ‡∏™‡πà‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏á‡πÉ‡∏ô req.file (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mimetype, size, filename)
‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÄ‡∏ä‡πà‡∏ô .exe, .zip) ‡∏î‡πâ‡∏ß‡∏¢ fileFilter

‡∏™‡∏£‡∏∏‡∏õ multer ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏∞‡πÑ‡∏£?
1. ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Frontend:  ‡∏≠‡πà‡∏≤‡∏ô multipart/form-data ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô req.file
2. ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô Memory ‡∏´‡∏£‡∏∑‡∏≠ Disk : ‡πÉ‡∏ä‡πâ memoryStorage() ‡∏´‡∏£‡∏∑‡∏≠ diskStorage() ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
3. ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ :  ‡πÉ‡∏ä‡πâ fileFilter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢
4. ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß / ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå: ‡πÉ‡∏ä‡πâ upload.single("file") ‡∏´‡∏£‡∏∑‡∏≠ upload.array("files", 5)

Express.js ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö file ‡πÉ‡∏ô req.body ‡πÄ‡∏û‡∏£‡∏≤‡∏∞:
req.body ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ JSON ‡∏´‡∏£‡∏∑‡∏≠ url-encoded ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
üìå ‡πÑ‡∏ü‡∏•‡πå (‡πÄ‡∏ä‡πà‡∏ô .jpg, .png) ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‚Üí Express.js ‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô undefined
‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô binary data ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ multipart/form-data
üìå multipart/form-data ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà Browser ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
üìå Express.js ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô multipart/form-data ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô req.body vs FormData:
1. application/json ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö JSON ‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö file
2. application/x-www-form-urlencoded ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å <form> ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö file
3. multipart/form-data ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö file
/// FRONTEND:
export const updateImageUrl = async (token, imageFile) => {
    return await axios.patch("http://localhost:8081/user/my-account/update-imageurl",
        { file: imageFile }, // ‚ùå ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ú‡πà‡∏≤‡∏ô `req.body` (‡∏ú‡∏¥‡∏î)
        {
            headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json", // ‚ùå JSON ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö `file`
            },
        }
    );
};
SO, BACKEND:
app.patch("/my-account/update-imageurl", (req, res) => {
    console.log(req.body.file); // ‚ùå ‡∏à‡∏∞‡πÑ‡∏î‡πâ `undefined`
});
Express.js ‡∏≠‡πà‡∏≤‡∏ô file ‡πÄ‡∏õ‡πá‡∏ô undefined
JSON ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö binary data (‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô buffer ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà string)
///‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚Üí ‡πÉ‡∏ä‡πâ FormData (FRONTEND)
‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ FormData ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Express.js ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ >> ‡∏™‡πà‡∏á file ‡πÅ‡∏ö‡∏ö multipart/form-data ‡∏ó‡∏µ‡πà Express.js ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
üöÄ ‡∏™‡∏£‡∏∏‡∏õ
‚ùå req.body ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö file ‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ JSON ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö binary data
‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ FormData ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö multipart/form-data
‚úÖ Backend ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ multer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô req.file (‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û)








DATABASE_URL="mysql://root:1234@localhost:3306/mb_airbnb"


CLOUDINARY_NAME = dul5famaq
CLOUDINARY_API_KEY = 587946986389696
CLOUDINARY_API_SECRET =n-IVbUTuzxYw9ci9unW7-UIF8qY


STRIPE_SECRET_KEY=sk_test_51R3UKg4FpLrx0t3akVE0lNBl2IfEMOgEAJj4LFNt5z68JyMvZfHchkt6ArnsY526gyMVWURLO79q7ijrmrovTFjm00KhMn1Ai8

# CLERK_PUBLISHABLE_KEY=pk_test_c3Rhci1wcmltYXRlLTY5LmNsZXJrLmFjY291bnRzLmRldiQ
# CLERK_SECRET_KEY=sk_test_qFrwFd4d7OtxfcTemU2qnmgKHmacdWvIildxHdmZcu

# CLERK_PUBLISHABLE_KEY=pk_test_bm9ibGUtcXVhZ2dhLTg4LmNsZXJrLmFjY291bnRzLmRldiQ
# CLERK_SECRET_KEY=sk_test_iLUkYqljdGO9bnNu8uaWpFvhVN57FaCSyQkBDiu1zA


CLERK_PUBLISHABLE_KEY=pk_test_c3Rhci1wcmltYXRlLTY5LmNsZXJrLmFjY291bnRzLmRldiQ
CLERK_SECRET_KEY=sk_test_qFrwFd4d7OtxfcTemU2qnmgKHmacdWvIildxHdmZcu


‡∏•‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• npm run resetDB
db push ‡∏Å‡πà‡∏≠‡∏ô seed = npx prisma db push
seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• npx prisma db seed