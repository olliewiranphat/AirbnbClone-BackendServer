const TryCatch = require("../../utils/TryCatch");
const prisma = require('../../models');
const createError = require("../../utils/createError");
const stripe = require("stripe")(process.env.STRIPE_SECRET_KEY);

///// Create Booking : 
exports.createBooking = TryCatch(async (req, res) => {
    console.log('req.user', req.user); //id (clerkID)
    console.log('req.body', req.body); // checkInDate, checkOutDate, totalPrice, guestQTY
    console.log('req.params', req.params); //accommodationID

    ///// Create Booking:
    const newBooking = await prisma.booking.create({
        data: {
            customerID: req.user.id,
            accomodationID: req.params.accomodationID,
            guestQTY: parseInt(req.body.guestQTY),
            checkInDate: new Date(req.body.checkInDate),
            checkOutDate: new Date(req.body.checkOutDate),
            totalPrice: req.body.totalPrice
        }
    })

    res.status(200).json({ message: "Success Create userBooking" })
})


/// Get userBooking History:
exports.getBookingHistory = TryCatch(async (req, res) => {
    console.log('req.user', req.user); //id (clerkID)

    ///// Get userBookings :
    const myBookings = await prisma.booking.findMany({
        where: { customerID: req.user.id },
        include: { accommodation: true, user: true, payment: true },
        orderBy: { createAt: "desc" }
    })
    res.status(200).json({ message: "Success Get UserBookings" })
})

exports.getBookings = async (req, res, next) => {
    try {
        const bookings = await prisma.booking.findMany({
            include: {
                customer: true,
                accommodation: true,
                Payment: true,
            },
        });

        res.status(200).json({ success: true, data: bookings });
    } catch (error) {
        next(error);
    }
};

// exports.getBookingHistory = TryCatch(async (req, res) => {
//     console.log('req.user', req.user); //id (clerkID)

//     ///// Get userBookings :
//     const myBookings = await prisma.booking.findMany({
//         where: { customerID: req.user.id },
//         include: { accommodation: true, user: true, payment: true },
//         orderBy: { createAt: "desc" }
//     });

//     // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• myBookings ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ frontend
//     res.status(200).json({
//         message: "Success Get UserBookings",
//         myBookings: myBookings
//     });
// });

exports.updateBooking = TryCatch(async (req, res) => {
    console.log('req.params', req.params);
    console.log('req.body', req.body);

    // ///// Update Booking:
    // const updateBooking = await prisma.booking.update({
    //     where: { bookingID: parseInt(req.params.bookingID) },
    //     data: {
    //         guestQTY: parseInt(req.body.guestQTY),
    //         checkInDate: new Date(req.body.checkInDate),
    //         checkOutDate: new Date(req.body.checkOutDate),
    //         totalPrice: req.body.totalPrice
    //     }
    // })
    // console.log('updateBooking', updateBooking);

    res.status(200).json({ message: "Success Update UserBookings" })
})

exports.cancelBooking = TryCatch(async (req, res) => {
    console.log('req.params', req.params); //bookingID
    // üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Booking ‡πÄ‡∏õ‡πá‡∏ô CANCELLED
    await prisma.booking.update({
        where: { bookingID: parseInt(req.params.bookingID) },
        data: { bookingStatus: "CANCELLED" }
    });

    // üîπ ‡∏ó‡∏≥ Refund ‡∏ö‡∏ô Stripe
    const paymentIntentId = await prisma.payment.findUnique({
        where: { bookingID: parseInt(req.params.bookingID) }
    })
    if (!paymentIntentId) {
        return createError(404, "Not checkeout yet!")
    }
    const resRefunding = await stripe.refunds.create({ //‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ refund ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ.
        payment_intent: paymentIntentId //‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Stripe ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
    });
    console.log('resRefunding', resRefunding); //‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô Stripe API 
    // ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô Webhook ‡∏´‡∏£‡∏∑‡∏≠ Response ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Stripe.

    /// stripeWebhook.js (PaymentController) : ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (refund) ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Stripe ‡∏™‡πà‡∏á‡∏°‡∏≤.
    //  ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (charge.refunded):
    // event.type === 'charge.refunded': ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Stripe ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (Refund).
    // ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ paymentIntentId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô FAILED ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô.
    res.status(200).json({ message: "Success Cancel UserBookings" })
})


exports.deleteBooking = async (req, res, next) => {
    try {
      const { bookingID } = req.params;
  
      await prisma.booking.delete({
        where: { bookingID: parseInt(bookingID) },
      });
  
      res.status(200).json({
        success: true,
        message: 'Booking cancelled successfully',
        redirect: '/booking/payment-cancel', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
      });
    } catch (error) {
      next(error);
    }
  };